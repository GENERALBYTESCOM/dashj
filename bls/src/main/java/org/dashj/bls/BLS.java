/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.dashj.bls;

public class BLS {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected BLS(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BLS obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JNI.delete_BLS(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static String getGROUP_ORDER() {
    return JNI.BLS_GROUP_ORDER_get();
  }

  public static boolean Init() {
    return JNI.BLS_Init();
  }

  public static void HashPubKeys(SWIGTYPE_p_bn_t output, long numOutputs, MessageHashVector serPubKeys, SWIGTYPE_p_std__vectorT_size_t_t sortedIndices) {
    JNI.BLS_HashPubKeys(SWIGTYPE_p_bn_t.getCPtr(output), numOutputs, MessageHashVector.getCPtr(serPubKeys), serPubKeys, SWIGTYPE_p_std__vectorT_size_t_t.getCPtr(sortedIndices));
  }

  /*  Dash Core Only
  public static PrivateKey PrivateKeyShare(PrivateKeyVector sks, byte [] id) {
    return new PrivateKey(JNI.BLS_PrivateKeyShare(PrivateKeyVector.getCPtr(sks), id), true);
  }

  public static PrivateKey RecoverPrivateKey(PrivateKeyVector sks, MessageHashVector ids) {
    return new PrivateKey(JNI.BLS_RecoverPrivateKey(PrivateKeyVector.getCPtr(sks), MessageHashVector.getCPtr(ids)), true);
  }

  public static PublicKey PublicKeyShare(PublicKeyVector pks, byte [] id) {
    return new PublicKey(JNI.BLS_PublicKeyShare(PublicKeyVector.getCPtr(pks), id), true);
  }

  public static PublicKey RecoverPublicKey(PublicKeyVector sks, MessageHashVector ids) {
    return new PublicKey(JNI.BLS_RecoverPublicKey(PublicKeyVector.getCPtr(sks), MessageHashVector.getCPtr(ids)), true);
  }

  public static InsecureSignature SignatureShare(InsecureSignatureVector sks, byte [] id) {
    return new InsecureSignature(JNI.BLS_SignatureShare(InsecureSignatureVector.getCPtr(sks), id), true);
  }

  public static InsecureSignature RecoverSig(InsecureSignatureVector sigs, MessageHashVector ids) {
    return new InsecureSignature(JNI.BLS_RecoverSig(InsecureSignatureVector.getCPtr(sigs), MessageHashVector.getCPtr(ids)), true);
  }

  public static PublicKey DHKeyExchange(PrivateKey privKey, PublicKey pubKey) {
    return new PublicKey(JNI.BLS_DHKeyExchange(PrivateKey.getCPtr(privKey), PublicKey.getCPtr(pubKey)), true);
  }
  */

  public static void CheckRelicErrors() {
    JNI.BLS_CheckRelicErrors();
  }

  public BLS() {
    this(JNI.new_BLS(), true);
  }

  public final static long MESSAGE_HASH_LEN = JNI.BLS_MESSAGE_HASH_LEN_get();
}
